# 重新执行绘图代码，确保绘图显示正常
import matplotlib.pyplot as plt
import numpy as np

# 添加中文字体支持
plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号

# 原始数据
data = np.array([
    [40, 2.133333e+00, 0.000000e+00],
    [80, 2.160338e+00, 0.000000e+00],
    [120, 2.161351e+00, 0.000000e+00],
    [160, 3.005136e+00, 0.000000e+00],
    [200, 2.815414e+00, 0.000000e+00],
    [240, 2.964933e+00, 0.000000e+00],
    [280, 2.902552e+00, 0.000000e+00],
    [320, 2.039968e+00, 0.000000e+00],
    [360, 2.919924e+00, 0.000000e+00],
    [400, 2.648787e+00, 0.000000e+00],
    [440, 2.831680e+00, 0.000000e+00],
    [480, 2.744457e+00, 0.000000e+00],
    [520, 2.508304e+00, 0.000000e+00],
    [560, 2.796901e+00, 0.000000e+00],
    [600, 2.822109e+00, 0.000000e+00],
    [640, 1.266769e+00, 0.000000e+00],
    [680, 2.718060e+00, 0.000000e+00],
    [720, 2.640454e+00, 0.000000e+00],
    [760, 2.719928e+00, 0.000000e+00],
    [800, 2.606142e+00, 0.000000e+00],
    [840, 2.602210e+00, 0.000000e+00],
    [880, 2.748420e+00, 0.000000e+00],
    [920, 2.659081e+00, 0.000000e+00],
    [960, 1.569654e+00, 0.000000e+00],
    [1000, 2.665004e+00, 0.000000e+00],
    [1040, 2.536823e+00, 0.000000e+00],
    [1080, 2.595966e+00, 0.000000e+00],
    [1120, 2.465820e+00, 0.000000e+00],
    [1160, 2.516156e+00, 0.000000e+00],
    [1200, 2.331370e+00, 0.000000e+00],
])

# 新数据（循环展开）
data_new = np.array([
    [40, 8.000000e+00], [80, 7.420290e+00], [120, 7.529412e+00], [160, 4.686499e+00],
    [200, 5.515340e+00], [240, 5.625229e+00], [280, 5.434336e+00], [320, 2.220581e+00],
    [360, 5.149385e+00], [400, 3.558917e+00], [440, 5.223929e+00], [480, 3.512976e+00],
    [520, 3.941470e+00], [560, 3.493699e+00], [600, 3.368868e+00], [640, 1.609119e+00],
    [680, 3.222333e+00], [720, 3.336355e+00], [760, 3.355919e+00], [800, 3.394100e+00],
    [840, 3.267918e+00], [880, 3.469402e+00], [920, 3.379114e+00], [960, 1.750015e+00],
    [1000, 3.311450e+00], [1040, 2.443134e+00], [1080, 3.269949e+00], [1120, 3.231291e+00],
    [1160, 3.237131e+00], [1200, 3.004583e+00]
])

# 修改第三组数据
data_third = np.array([
    [40, 5.565217e+00], [80, 5.752809e+00], [120, 5.818182e+00], [160, 5.764954e+00],
    [200, 5.706134e+00], [240, 5.550693e+00], [280, 5.432319e+00], [320, 5.511859e+00],
    [360, 5.290996e+00], [400, 5.497573e+00], [440, 5.529095e+00], [480, 5.379119e+00],
    [520, 5.413205e+00], [560, 5.348113e+00], [600, 5.357409e+00], [640, 5.369988e+00],
    [680, 5.310634e+00], [720, 5.348580e+00], [760, 5.300298e+00], [800, 5.174801e+00],
    [840, 5.181568e+00], [880, 5.204977e+00], [920, 5.151041e+00], [960, 4.970427e+00],
    [1000, 4.982586e+00], [1040, 5.030855e+00], [1080, 5.090198e+00], [1120, 4.893250e+00],
    [1160, 5.015926e+00], [1200, 4.955599e+00]
])

# 修改第四组数据
data_fourth = np.array([
    [40, 5.565217e+00], [80, 5.785311e+00], [120, 5.769616e+00], [160, 5.760900e+00],
    [200, 5.691925e+00], [240, 5.677207e+00], [280, 5.635944e+00], [320, 5.545908e+00],
    [360, 5.447922e+00], [400, 5.493798e+00], [440, 5.532327e+00], [480, 5.468354e+00],
    [520, 5.452881e+00], [560, 5.387076e+00], [600, 5.276014e+00], [640, 5.374887e+00],
    [680, 5.356867e+00], [720, 5.198730e+00], [760, 5.234785e+00], [800, 4.996438e+00],
    [840, 5.316327e+00], [880, 5.172993e+00], [920, 5.143318e+00], [960, 5.080266e+00],
    [1000, 5.115848e+00], [1040, 5.094077e+00], [1080, 5.026232e+00], [1120, 5.028366e+00],
    [1160, 5.012020e+00], [1200, 5.031696e+00]
])

# 修改第五组数据
data_fifth = np.array([
    [40, 9.142857e+00], [80, 9.142857e+00], [120, 9.290323e+00], [160, 9.163311e+00],
    [200, 9.060023e+00], [240, 9.053045e+00], [280, 8.849829e+00], [320, 9.041943e+00],
    [360, 8.716674e+00], [400, 8.524241e+00], [440, 8.699791e+00], [480, 8.397904e+00],
    [520, 8.533592e+00], [560, 8.527118e+00], [600, 8.516175e+00], [640, 8.345080e+00],
    [680, 8.272241e+00], [720, 8.279130e+00], [760, 8.364076e+00], [800, 8.343654e+00],
    [840, 8.303910e+00], [880, 8.049991e+00], [920, 8.175159e+00], [960, 7.820318e+00],
    [1000, 7.955608e+00], [1040, 7.791725e+00], [1080, 8.196981e+00], [1120, 8.269049e+00],
    [1160, 8.034239e+00], [1200, 8.066210e+00]
])

# 提取 X 和 Y 轴数据
x1, y1 = data[:, 0], data[:, 1]
x2, y2 = data_new[:, 0], data_new[:, 1]
x3, y3 = data_third[:, 0], data_third[:, 1]
x4, y4 = data_fourth[:, 0], data_fourth[:, 1]
x5, y5 = data_fifth[:, 0], data_fifth[:, 1]

# 绘制图表
plt.figure(figsize=(12, 7))  # 加大图表尺寸
plt.plot(x1, y1, marker='o', label="基准版本", linewidth=2)
plt.plot(x2, y2, marker='s', label="循环展开", linewidth=2)  # 更新标签
plt.plot(x3, y3, marker='^', label="分块+循环展开", linewidth=2, color='green')
plt.plot(x4, y4, marker='d', label="SIMD+寄存器+并行化", linewidth=2, color='purple')  # 更新标签为"AVX"
plt.plot(x5, y5, marker='v', label="内存重排", linewidth=2, color='red')  # 更新标签为"内存重排"

# 图表美化
plt.title("矩阵乘法性能优化对比", fontsize=16)
plt.xlabel("矩阵大小 (N)", fontsize=14)
plt.ylabel("计算性能 (GFLOPS)", fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(fontsize=12, loc='best')

# 添加网格和边距
plt.grid(True, linestyle='--', alpha=0.7)
plt.margins(x=0.02)  # 减少x轴边距

# 优化刻度显示
plt.xticks(rotation=45)
plt.tight_layout()

# 显示图表
plt.show()
